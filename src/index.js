const puppeteer = require('puppeteer');
const TelegramBot = require('node-telegram-bot-api');

const TOKEN = require('../configs/telegramToken');
const {binanceListingNewsURL, coinMarketCapURL} = require('../configs/URLS');
const {
    BinanceNewsListingSelector,
    MEXCTickerSelector,
    GateIoSelector,
    KuCoinSelector
} = require('../configs/selectors');
const listingOn = require('./listingKeywords');
const {
    MEXC,
    GateIo,
    KuCoin
} = require('../configs/cryptoCurrencyName');
const {telegramID} = require('../configs/telegramIDS')

const bot = new TelegramBot(TOKEN, {polling: true});

let lastListingNews = '';
let cryptoListingName = '';

async function parse(parseURL, selector) {

    try {

        const browser = await puppeteer.launch(); //–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
        const page = await browser.newPage(); //–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏
        await page.goto(parseURL); //–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏–º —Å–ø–∞—Ä—Å–∏—Ç—å

        //–ñ–¥–µ–º –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç
        await page.waitForSelector(selector);
        const listingText = await page.$eval(selector, (element) => element['innerText']);
        const listingURL = await page.$eval(selector, (element) => `https://www.binance.com/${element.getAttribute('href')}`);
        // console.log(listingText)
        // const listingText = 'Binance Will List ApeCoin (SDASDSADASD)';

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤ –ø–æ–ª—É—á–µ–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ true –∏–ª–∏ false –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        const checkIsListing = listingText.includes(listingOn.binance);

        //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ä–∞–≤–Ω–∞ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å —Ç–æ–π —á—Ç–æ –º—ã –ø–æ–ª—É—á–∞–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        //—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∂–¥—ã–π 3 —Å–µ–∫.
        //–ï—Å–ª–∏ –Ω–µ —Ä–∞–≤–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ —Ä–∞–≤–Ω–∞, —Ç–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫. –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if (lastListingNews != listingText) {
            //–ï—Å–ª–∏ –≤ –ø–æ–ª—É—á–µ–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É
            if (checkIsListing) {

                const split = listingText.split(' '); //–î–µ–ª–∏–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –Ω–∞ –º–∞—Å–∏–≤ —Å–ª–æ–≤

                //–ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª—è—é—Ç
                for (const item of split) {

                    const checkCryptoName = item.includes('('); //–ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—ë –≤ –ø–µ—Ä–µ–º–µ–Ω—É—é
                    //–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è checkCryptoName —Ä–∞–≤–Ω–∞ true, —Ç–æ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤
                    //–ø–µ—Ä–µ–º–µ–Ω–Ω—É—é cryptoListingName —Å–∫–æ—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
                    if (checkCryptoName) {
                        //–û–±—Ä–µ–∑–∞–µ–º –≤—Å–µ –Ω–µ –Ω—É–∂–Ω–æ–µ —Å –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
                        cryptoListingName = item.substring(1, item.length - 1);
                        //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é lastListingNews —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∞–µ–º –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                        //–ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –º—ã –ø–æ–ª—É—á–∞–µ–º —ç—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —Ç–æ –º—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                        // await bot.sendMessage(720663165, listingText);
                        lastListingNews = listingText;
                    }

                }

                //–°–µ–π—á–∞—Å –≤ –±–ª–æ–∫–µ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à—ë–ª –ø–µ—Ä–µ–≤–µ—Ä–∫—É –Ω–∞ —Å–ª–æ–≤–∞ –æ –ª–∏—Å—Ç–∏–Ω–≥–µ —Å —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                const checkMEXC = checkIfCoinOnFuturesInCryptoExchange(
                    `https://futures.mexc.com/exchange/${cryptoListingName}_USDT?type=linear_swap`,
                    MEXCTickerSelector,
                    cryptoListingName,
                    MEXC
                );


                const checkGateIo = checkIfCoinOnFuturesInCryptoExchange(
                    `https://www.gate.io/futures_trade/USDT/${cryptoListingName}_USDT`,
                    GateIoSelector,
                    cryptoListingName,
                    GateIo
                );


                const checkKuCoin = checkIfCoinOnFuturesInCryptoExchange(
                    `https://futures.kucoin.com/trade/${cryptoListingName}USDTM?spm=kcWeb.B1homepage.Header5.1`,
                    KuCoinSelector,
                    cryptoListingName,
                    KuCoin
                );

                // console.log('test')

                Promise.all([checkMEXC, checkGateIo, checkKuCoin]).then(cryptoCurrencyNameArray => {
                    sendMessageToTelegramUser(telegramID.hovvko, cryptoCurrencyNameArray, cryptoListingName, listingURL)
                })
            }
        }

        await browser.close();

    } catch (error) {
        if (error) {
            console.log(error);
        }
    }
}

//–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ
async function checkIfCoinOnFuturesInCryptoExchange(cryptoExchangeFuturesURL, selector, coinName, cryptoCurrencyName) {
    //–ó–∞–≥—Ä—É–∑–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞, –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ —Ç–∞ –ø—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ—å—é—á–µ—Ä—Å–æ–≤ - –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ URL –¥–∏–Ω–∞–º–∏—á–Ω–æ
    //–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—ã—à–µ
    const browser = await puppeteer.launch();
    const page = await browser.newPage();
    await page.goto(cryptoExchangeFuturesURL);

    //–ñ–¥–µ–º –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –Ω—É–∂–Ω—ã–π –Ω–∞–º —Å–µ–ª–µ–∫—Ç–æ—Ä
    await page.waitForSelector(selector);
    const tickerText = await page.$eval(selector, (element) => element['innerText']);
    // console.log(tickerText)

    const isNeedCoin = tickerText.includes(coinName);

    //–ü—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –º–æ–Ω–µ—Ç–∞ –Ω–∞ —Ñ—å—é—á–µ—Ä—Å–∞—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏—Ä–∂–∏
    if (isNeedCoin) {
        await browser.close();
        return cryptoCurrencyName;
    } else {
        await browser.close();
        return null
    }
}

setInterval(() => {
    (async function () {
        return await parse(binanceListingNewsURL, BinanceNewsListingSelector);
    }())
}, 5000);

async function sendMessageToTelegramUser(userTelegramID, onFuturesArray, cryptoListingName, listingURL,) {
    const MEXCFuturesURL = `https://futures.mexc.com/exchange/${cryptoListingName}_USDT?type=linear_swap`;
    const GateIoFuturesURL = `https://www.gate.io/futures_trade/USDT/${cryptoListingName}_USDT`;
    const KuCoinFuturesURL = `https://futures.kucoin.com/trade/${cryptoListingName}USDTM?spm=kcWeb.B1homepage.Header5.1`;

    const telegramTextIfCoinTheresInFutures =
        `
‚úÖ –õ–∏—Å—Ç–∏–Ω–≥ –Ω–∞ - [Binance](${listingURL})

üöÄ –ú–æ–Ω–µ—Ç–∞ - ${cryptoListingName}

–§—å—é—á–µ—Ä—Å—ã:
${onFuturesArray[0] ? (`[${onFuturesArray[0]}](${MEXCFuturesURL})`) : ''}
${onFuturesArray[1] ? (`[${onFuturesArray[1]}](${GateIoFuturesURL})`) : ''}
${onFuturesArray[2] ? (`[${onFuturesArray[2]}](${KuCoinFuturesURL})`) : ''}
`;

    const telegramTextIfCoinTheresInSpot =
`
‚úÖ –õ–∏—Å—Ç–∏–Ω–≥ –Ω–∞ - [Binance](${listingURL})

üöÄ –ú–æ–Ω–µ—Ç–∞ - ${cryptoListingName}

–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–¥–µ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –º–æ–Ω–µ—Ç–∞ - [–ö–õ–ò–ö](${coinMarketCapURL})
`;

    if (onFuturesArray[0] || onFuturesArray[1] || onFuturesArray[2]) {
        await bot.sendMessage(userTelegramID, telegramTextIfCoinTheresInFutures, {parse_mode: 'Markdown'});
    } else {
        await bot.sendMessage(userTelegramID, telegramTextIfCoinTheresInSpot, {parse_mode: 'Markdown'});
    }

}
